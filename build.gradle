buildscript {
    apply from: "./script/gradle-script/k-gradle-config.gradle"
    apply from: "./script/gradle-script/k-gradle-version.gradle"


    repositories {
        mavenLocal()

        maven {
            url "https://maven.aliyun.com/repository/public"
        }

        mavenCentral()
    }
    dependencies {
        classpath(app_plugins['spring-boot-gradle-plugin'])
        classpath(app_plugins['gradle-docker-plugin'])
    }

}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-allprojects.gradle"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    repositories {
        mavenLocal()
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'signing'
    apply from: "$rootProject.rootDir/script/gradle-script/k-gradle-subprojects.gradle"

    group 'io.github.kylin-hunter'
    version "${KYLIN_VERION}"
    kylinLoadSecretProperties()


    dependencies {

        implementation("ch.qos.logback:logback-classic")
        implementation("org.projectlombok:lombok")
        annotationProcessor 'org.projectlombok:lombok'


        testImplementation("org.projectlombok:lombok")
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation 'org.junit.platform:junit-platform-suite'


        testImplementation(rootProject.dependency_management['jmockit'])

    }

    jar {
        archiveClassifier = ''
        manifest.attributes provider: 'gradle'
    }

    java {
        withSourcesJar()
        withJavadocJar()

    }

    javadoc {
        options {
            encoding = "UTF-8"
            charSet = 'UTF-8'
            author = true
            version = true
            locale = "en_US"
        }
        failOnError = false

    }
    classes.finalizedBy(kylinTaskChangeActiveProfile)


    test {
//        exclude 'com/kylinhunter/**/Suite**'
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { true }
            showStandardStreams = true
        }
    }




    publishing {


        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
                pom {

                    name = "${KYLIN_MVN_CONFIG.name}"
                    description = "${KYLIN_MVN_CONFIG.description}"
                    url = "${KYLIN_MVN_CONFIG.url}"
                    licenses {
                        license {
                            name = "${KYLIN_MVN_CONFIG.license.name}"
                            url = "${KYLIN_MVN_CONFIG.license.url}"
                        }
                    }
                    developers {
                        developer {
                            name = "${KYLIN_MVN_CONFIG.developer.name}"
                            email = "${KYLIN_MVN_CONFIG.developer.email}"
                        }
                    }
                    scm {
                        url =  "${KYLIN_MVN_CONFIG.url}"
                        connection =  "${KYLIN_MVN_CONFIG.connection}"
                        developerConnection =  "${KYLIN_MVN_CONFIG.developerConnection}"
                    }
                }
            }
        }
        repositories {


            maven {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                if (KYLIN_VERION.endsWith("SNAPSHOT")){
                    url  "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                }

                credentials {

                    println "maven=>${sonatypeUsername} : ${sonatypePassword}"
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }

    }


    signing {
        sign publishing.publications.mavenJava
    }


}

wrapper {
    gradleVersion = '6.9'
    archiveBase = 'GRADLE_USER_HOME'
    archivePath = 'wrapper/dists'
    distributionBase = 'GRADLE_USER_HOME"'
    distributionPath = 'wrapper/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-6.9-bin.zip'
}
